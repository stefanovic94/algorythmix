from abc import ABCMeta, abstractmethod
from datetime import datetime, timezone
from uuid import uuid4

from pydantic import BaseModel, Field


class Event(BaseModel, metaclass=ABCMeta):
    """CloudEvent JSON schema specification @ https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md"""

    id: str = Field(
        default_factory=lambda: str(uuid4()),
        description="The unique ID for this event.",
    )
    time: datetime = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        description="UTC timestamp when the event happened.",
        examples=["2018-04-05T17:31:00Z"],
    )
    type: str = Field(
        ...,
        description="The type of the event. This is commonly generated by using the <domain>.<event_name>.<version>.",
        examples=["com.example.someevent"],
    )
    spec_version: str = Field(
        ...,
        description="The version of the CloudEvents specification which the event uses.",
        examples=["1.0"],
        alias="specversion",
    )
    source: str = Field(
        ...,
        description="Identifies the context in which an event happened.",
        examples=["https://example.com/source"],
    )
    subject: str = Field(
        ...,
        description="Describes the subject of the event in the context of the event producer (identified by source).",
        examples=["larger-context"],
    )
    data_content_type: str = Field(
        ...,
        description="Content type of the data value.",
        examples=["application/json"],
        alias="datacontenttype",
    )
    data: BaseModel = Field(
        ...,
        description="The payload of the event. This will be some subinstance of the BaseModel type for validation purposes.",
    )

    @abstractmethod
    async def produce(self) -> None:
        """Produces the event to the event stream."""
        pass

    @abstractmethod
    async def process(self) -> None:
        """This method will be called upon receiving the event after the parsing and validation process."""
        pass
